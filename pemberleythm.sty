\ProvidesPackage{pemberleythm}[2020/02/03 Adrian's Pemberley Theorem]

% WARNING!
% This package uses dark magic to get autoref and hyperref get along with each other and with numbering theorems etc. all with the same counter.

% ----------------------------------------------------------------------------
% "THE COFFEEWARE LICENSE":
% Adrian Rettich (adrian.rettich@gmail.com) wrote this file. As long as you 
% retain this notice, you can do whatever you want with this stuff. If we 
% should meet in person some day, and you think this stuff is worth it, you 
% are welcome to buy me a coffee in return.  
% ----------------------------------------------------------------------------

\RequirePackage{amsthm}
\RequirePackage{ifthen}
\RequirePackage{pgfopts}
\RequirePackage{hyperref}
\RequirePackage{aliascnt} % allows multiple counters pointing to the same memory bank. Necessary to fool \autoref.

\def\@pemberleyunknown{}

% AND NOW THE KEYS
\pgfkeys{
  /pemberleythm/.cd,
  uppercase/.is if=pemberleyuppercase,
  counter/.store in=\@pemberleycounter,
	.unknown/.code={
		\ifthenelse{\equal{\pgfkeyscurrentvalue}{\pgfkeysnovalue}}{
			\edef\@pemberleyunknown{\@pemberleyunknown,\pgfkeyscurrentname}
		}{
			\edef\@pemberleyunknown{\@pemberleyunknown,\pgfkeyscurrentname=\pgfkeyscurrentvalue}
		}
	}
}
\ProcessPgfPackageOptions{/pemberleythm}

\relax

\PassOptionsToPackage{\@pemberleyunknown}{pemberley}
\RequirePackage{pemberley}

% OPTIONS
\ifx\chapter\@undefined
  \def\@pemberleycounter{section}
\else
  \def\@pemberleycounter{chapter}
\fi

\newif\ifpemberleyuppercase
\newcommand\@fixcase[1]{%
    \IfGermanTF{#1}{%
  \ifpemberleyuppercase #1%
  \else \expandafter\lowercase\expandafter{#1}%
  \fi%
  }
}

\newcommand\@pemberleynewtheorem[3]{% name, Name, style
  % default name, style and starishness
  \@namedef{@pemberley#1}{#2} % default name
  \@namedef{@pemberley#1style}{#3} % default style
  \newboolean{pemberley#1star}
  % Allow user to overwrite all of the above
  \edef\@tmp{%
    #1/.store in=\expandafter\noexpand\csname @pemberley#1\endcsname,
    #1style/.store in=\expandafter\noexpand\csname @pemberley#1style\endcsname,
    #1*/.is if=pemberley#1star,
  }
  \expandafter\pgfkeys\expandafter{\@tmp}
  % Executed after parsing package options
  \@pemberleyaddthm{#1}
}


\newcommand*\@pemberleythms{} % executed after parsing package options
\newcommand\@pemberleyaddthm[1]{% fill the macro above with contents
  \expandafter\def\expandafter\@pemberleythms\expandafter
  {\@pemberleythms\@pemberleymakethm{#1}}%
}
\newcommand\@pemberleymakethm[1]{%
  \@namedef{@pemberley#1refname}{\expandafter\@fixcase\expandafter{\csname @pemberley#1\endcsname}}
  \theoremstyle{\@nameuse{@pemberley#1style}}
  \ifthenelse{\boolean{pemberley#1star}}{
    \newtheorem*{#1}{\@nameuse{@pemberley#1}}
  }{
    \newaliascnt{ac#1}{meta-thm} % need to rename the counter in order for \autoref to work
    \newtheorem{#1}[ac#1]{\@nameuse{@pemberley#1}}
    \aliascntresetthe{ac#1} % dark magic needed to prevent a mystical error
	\@namedef{ac#1autorefname}{\@nameuse{@pemberley#1refname}}
  }
  % For thm environments containing an eumneration only.
  \newenvironment{#1-enum}[1][]
    {\begin{#1}[##1]\hfill\begin{enumerate}}
    {\end{enumerate}\end{#1}}
}

% THEOREMS
\@pemberleynewtheorem{theorem}{Theorem}{plain}
\@pemberleynewtheorem{lemma}{Lemma}{plain}
\@pemberleynewtheorem{corollary}{Corollary}{plain}
\@pemberleynewtheorem{definition}{Definition}{definition}
\@pemberleynewtheorem{notation}{Notation}{definition}
\@pemberleynewtheorem{exercise}{Exercise}{definition}
\@pemberleynewtheorem{remark}{Remark}{remark}
\@pemberleynewtheorem{example}{Example}{remark}


% Never use this theorem
\newtheorem{meta-thm}{Meta}[\@pemberleycounter]

% Make our theorems come true ^_^
\@pemberleythms


% MACROS

% args: name, Name, style

\newcommand\newpemberleythm{\@ifstar\@newpemberleythm\@@newpemberleythm}

\def\@newpemberleythm{
	\@@@newpemberleythm{true}
}

\def\@@newpemberleythm{
	\@@@newpemberleythm{false}
}

\newcommand\@@@newpemberleythm[4]{
	\@namedef{@pemberley#2}{#3}
	\@namedef{@pemberley#2style}{#4}
	\newboolean{pemberley#2star}
	\setboolean{pemberley#2star}{#1}
	\@pemberleymakethm{#2}
	}

\endinput

